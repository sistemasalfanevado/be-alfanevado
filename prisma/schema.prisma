generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PROD")
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model LandingFooterContact {
  id        String    @id @default(uuid())
  title     String    @db.VarChar(150)
  detail    String    @db.VarChar(400)
  icon      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("landing_footer_contact")
}

model LandingFooterLink {
  id        String    @id @default(uuid())
  title     String    @db.VarChar(150)
  link      String    @db.VarChar(400)
  icon      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("landing_footer_link")
}

model LandingFooterSocial {
  id        String    @id @default(uuid())
  link      String    @db.VarChar(400)
  icon      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("landing_footer_social")
}

model LandingPage {
  id               String                   @id @default(uuid())
  title            String                   @db.VarChar(150)
  route            String                   @unique @db.VarChar(100)
  deletedAt        DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  completeProjects LandingCompleteProject[]
  contents         LandingContent[]
  contentSliders   LandingContentSlider[]
  contentYears     LandingContentYear[]
  features         LandingFeature[]
  heroBanners      LandingHeroBanner[]
  lots             LandingLot[]
  projects         LandingProject[]

  @@map("landing_page")
}

model LandingHeroBanner {
  id        String      @id @default(uuid())
  title     String      @db.VarChar(150)
  subtitle  String      @db.VarChar(400)
  linkImage String      @db.VarChar(400)
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  pageId    String
  nameImage String      @db.VarChar(100)
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_hero_banner")
}

model LandingFeature {
  id        String      @id @default(uuid())
  title     String      @db.VarChar(150)
  detail    String      @db.VarChar(400)
  icon      String      @db.VarChar(100)
  pageId    String
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_feature")
}

model LandingProject {
  id            String      @id @default(uuid())
  linkImage1    String      @db.VarChar(400)
  linkImage2    String      @db.VarChar(400)
  title         String      @db.VarChar(150)
  subtitle      String      @db.VarChar(400)
  textButton    String      @db.VarChar(50)
  linkRedirect1 String?     @db.VarChar(400)
  linkRedirect2 String?     @db.VarChar(400)
  pageId        String
  deletedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  nameImage1    String      @db.VarChar(100)
  nameImage2    String      @db.VarChar(100)
  position      Int         @default(0)
  page          LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_project")
}

model LandingContent {
  id        String      @id @default(uuid())
  title     String      @db.VarChar(150)
  subtitle  String      @db.VarChar(400)
  pageId    String
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  position  Int         @default(0)
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_content")
}

model LandingContentYear {
  id          String      @id @default(uuid())
  year        String      @db.VarChar(10)
  yearMessage String      @db.VarChar(200)
  title       String      @db.VarChar(150)
  subtitle    String      @db.VarChar(400)
  linkImage   String      @db.VarChar(400)
  pageId      String
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  nameImage   String      @db.VarChar(100)
  page        LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_content_year")
}

model LandingContentSlider {
  id         String      @id @default(uuid())
  title      String      @db.VarChar(150)
  subtitle   String      @db.VarChar(400)
  linkImage1 String?     @db.VarChar(400)
  linkImage2 String?     @db.VarChar(400)
  linkImage3 String?     @db.VarChar(400)
  linkImage4 String?     @db.VarChar(400)
  pageId     String
  deletedAt  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  nameImage1 String?     @db.VarChar(100)
  nameImage2 String?     @db.VarChar(100)
  nameImage3 String?     @db.VarChar(100)
  nameImage4 String?     @db.VarChar(100)
  page       LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_content_slider")
}

model LandingLotStatus {
  id        String       @id @default(uuid())
  title     String       @db.VarChar(25)
  deletedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  lots      LandingLot[]

  @@map("landing_lot_status")
}

model LandingLot {
  id        String           @id @default(uuid())
  name      String           @db.VarChar(50)
  number    String           @db.VarChar(50)
  block     String           @db.VarChar(50)
  code      String           @db.VarChar(50)
  statusId  String
  pageId    String
  deletedAt DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  area      Decimal?         @db.Decimal(6, 2)
  detail    String?          @db.VarChar(500)
  perimeter Decimal?         @db.Decimal(6, 2)
  page      LandingPage      @relation(fields: [pageId], references: [id])
  status    LandingLotStatus @relation(fields: [statusId], references: [id])

  @@map("landing_lot")
}

model LandingSetting {
  id              String    @id @default(uuid())
  site            String    @unique
  maintenanceMode Boolean   @default(false)
  deletedAt       DateTime?
}

model LandingTermCondition {
  id          String    @id @default(uuid())
  description String
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("landing_term_condition")
}

model LandingCompleteProject {
  id        String      @id @default(uuid())
  linkImage String      @db.VarChar(400)
  nameImage String      @db.VarChar(100)
  subtitle  String      @db.VarChar(400)
  position  Int         @default(0)
  pageId    String
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_complete_project")
}

// ZENTRA

model ZentraUser {
  id           String       @id @default(uuid())
  firstName    String       @db.VarChar(100)
  lastName     String       @db.VarChar(100)
  email        String       @unique @db.VarChar(255)
  password     String
  gender       String       @db.VarChar(20)
  profileUrl   String?      @db.VarChar(300)
  roleId       String
  role         ZentraRole   @relation(fields: [roleId], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("zentra_user")
}

model ZentraRole {
  id           String                    @id @default(uuid())
  name         String                    @unique @db.VarChar(100)
  description  String                    @db.VarChar(200)
  users        ZentraUser[]
  permissions  ZentraRolePermission[]
  deletedAt    DateTime?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt

  @@map("zentra_role")
}

model ZentraPageGroup {
  id           String       @id @default(uuid())
  name         String       @unique @db.VarChar(100)
  description  String       @db.VarChar(200)
  pages        ZentraPage[]
  deletedAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("zentra_page_group")
}

model ZentraPage {
  id           String                  @id @default(uuid())
  name         String                  @db.VarChar(100)
  description  String                  @db.VarChar(200)
  route        String                  @db.VarChar(300)
  pageGroupId  String
  pageGroup    ZentraPageGroup         @relation(fields: [pageGroupId], references: [id])
  permissions  ZentraRolePermission[]
  deletedAt    DateTime?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  @@map("zentra_page")
}

model ZentraRolePermission {
  id           String             @id @default(uuid())
  roleId       String
  pageId       String
  canCreate    Boolean            @default(false)
  canEdit      Boolean            @default(false)
  canDelete    Boolean            @default(false)
  role         ZentraRole         @relation(fields: [roleId], references: [id])
  page         ZentraPage         @relation(fields: [pageId], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([roleId, pageId]) // Un permiso por p√°gina por rol

  @@map("zentra_role_permission")
}