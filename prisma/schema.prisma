generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PROD")
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  deletedAt DateTime?
}

model LandingFooterContact {
  id        String    @id @default(uuid())
  title     String    @db.VarChar(150)
  detail    String    @db.VarChar(400)
  icon      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("landing_footer_contact")
}

model LandingFooterLink {
  id        String    @id @default(uuid())
  title     String    @db.VarChar(150)
  link      String    @db.VarChar(400)
  icon      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("landing_footer_link")
}

model LandingFooterSocial {
  id        String    @id @default(uuid())
  link      String    @db.VarChar(400)
  icon      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("landing_footer_social")
}

model LandingPage {
  id               String                   @id @default(uuid())
  title            String                   @db.VarChar(150)
  route            String                   @unique @db.VarChar(100)
  deletedAt        DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  completeProjects LandingCompleteProject[]
  contents         LandingContent[]
  contentSliders   LandingContentSlider[]
  contentYears     LandingContentYear[]
  features         LandingFeature[]
  heroBanners      LandingHeroBanner[]
  lots             LandingLot[]
  projects         LandingProject[]

  zentraProjects ZentraLandingPageRelation[]
  
  @@map("landing_page")
}

model LandingHeroBanner {
  id        String      @id @default(uuid())
  title     String      @db.VarChar(150)
  subtitle  String      @db.VarChar(400)
  linkImage String      @db.VarChar(400)
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  pageId    String
  nameImage String      @db.VarChar(100)
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_hero_banner")
}

model LandingFeature {
  id        String      @id @default(uuid())
  title     String      @db.VarChar(150)
  detail    String      @db.VarChar(400)
  icon      String      @db.VarChar(100)
  pageId    String
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_feature")
}

model LandingProject {
  id            String      @id @default(uuid())
  linkImage1    String      @db.VarChar(400)
  linkImage2    String      @db.VarChar(400)
  title         String      @db.VarChar(150)
  subtitle      String      @db.VarChar(400)
  textButton    String      @db.VarChar(50)
  linkRedirect1 String?     @db.VarChar(400)
  linkRedirect2 String?     @db.VarChar(400)
  pageId        String
  deletedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  nameImage1    String      @db.VarChar(100)
  nameImage2    String      @db.VarChar(100)
  position      Int         @default(0)
  page          LandingPage @relation(fields: [pageId], references: [id])
  
  @@map("landing_project")
}

model LandingContent {
  id        String      @id @default(uuid())
  title     String      @db.VarChar(150)
  subtitle  String      @db.VarChar(400)
  pageId    String
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  position  Int         @default(0)
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_content")
}

model LandingContentYear {
  id          String      @id @default(uuid())
  year        String      @db.VarChar(10)
  yearMessage String      @db.VarChar(200)
  title       String      @db.VarChar(150)
  subtitle    String      @db.VarChar(400)
  linkImage   String      @db.VarChar(400)
  pageId      String
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  nameImage   String      @db.VarChar(100)
  page        LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_content_year")
}

model LandingContentSlider {
  id         String      @id @default(uuid())
  title      String      @db.VarChar(150)
  subtitle   String      @db.VarChar(400)
  linkImage1 String?     @db.VarChar(400)
  linkImage2 String?     @db.VarChar(400)
  linkImage3 String?     @db.VarChar(400)
  linkImage4 String?     @db.VarChar(400)
  pageId     String
  deletedAt  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  nameImage1 String?     @db.VarChar(100)
  nameImage2 String?     @db.VarChar(100)
  nameImage3 String?     @db.VarChar(100)
  nameImage4 String?     @db.VarChar(100)
  page       LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_content_slider")
}

model LandingLotStatus {
  id        String       @id @default(uuid())
  title     String       @db.VarChar(25)
  deletedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  lots      LandingLot[]

  @@map("landing_lot_status")
}

model LandingLot {
  id        String           @id @default(uuid())
  name      String           @db.VarChar(50)
  number    String           @db.VarChar(50) 
  block     String           @db.VarChar(50)
  code      String           @db.VarChar(50)
  statusId  String
  pageId    String
  deletedAt DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  area      Decimal?         @db.Decimal(6, 2)
  detail    String?          @db.VarChar(500)
  perimeter Decimal?         @db.Decimal(6, 2)
  page      LandingPage      @relation(fields: [pageId], references: [id])
  status    LandingLotStatus @relation(fields: [statusId], references: [id])


  scheduledIncomeDocuments ZentraScheduledIncomeDocument[]

  @@map("landing_lot")
}

model LandingSetting {
  id              String    @id @default(uuid())
  site            String    @unique
  maintenanceMode Boolean   @default(false)
  deletedAt       DateTime?
}

model LandingTermCondition {
  id          String    @id @default(uuid())
  description String
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("landing_term_condition")
}

model LandingCompleteProject {
  id        String      @id @default(uuid())
  linkImage String      @db.VarChar(400)
  nameImage String      @db.VarChar(100)
  subtitle  String      @db.VarChar(400)
  position  Int         @default(0)
  pageId    String
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  page      LandingPage @relation(fields: [pageId], references: [id])

  @@map("landing_complete_project")
}

// ZENTRA

model ZentraUser {
  id           String       @id @default(uuid())
  firstName    String       @db.VarChar(100)
  lastName     String       @db.VarChar(100)
  email        String       @unique @db.VarChar(255)
  password     String
  
  profileUrl   String?      @db.VarChar(300)
  roleId       String
  role         ZentraRole   @relation(fields: [roleId], references: [id])

  genreId      String?
  genre        ZentraGenre? @relation(fields: [genreId], references: [id])

  mainRoute    String?      @db.VarChar(200)

  documents             ZentraDocument[]
  increaseRequests      ZentraBudgetIncreaseRequest[]
  budgetItemHistories   ZentraBudgetItemHistory[]
  passwordResetTokens   ZentraPasswordResetToken[]

  deletedAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_user")
}

model ZentraPasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique @db.VarChar(300)
  userId    String
  user      ZentraUser @relation(fields: [userId], references: [id])
  
  expiresAt DateTime
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())

  @@map("zentra_password_reset_token")
}

model ZentraGenre {
  id           String                    @id @default(uuid())
  name         String                    @unique @db.VarChar(20)
  users        ZentraUser[]
  deletedAt    DateTime?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  @@map("zentra_genre")
}

model ZentraRole {
  id           String                    @id @default(uuid())
  name         String                    @unique @db.VarChar(100)
  description  String                    @db.VarChar(200)
  users        ZentraUser[]
  permissions  ZentraRolePermission[]
  
  roleActions  ZentraRoleAction[]

  deletedAt    DateTime?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_role")
}

model ZentraAction {
  id        String               @id @default(uuid())
  name      String               @unique @db.VarChar(50)

  roleActions ZentraRoleAction[]

  deletedAt  DateTime?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("zentra_action")
}

model ZentraRoleAction {
  id        String       @id @default(uuid())

  role      ZentraRole   @relation(fields: [roleId], references: [id])
  roleId    String

  action    ZentraAction @relation(fields: [actionId], references: [id])
  actionId  String

  deletedAt DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("zentra_role_action")
}

model ZentraPageGroup {
  id           String       @id @default(uuid())
  name         String       @unique @db.VarChar(100)
  description  String       @db.VarChar(200)
  pages        ZentraPage[]
  deletedAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_page_group")
}

model ZentraPage {
  id           String                  @id @default(uuid())
  name         String                  @db.VarChar(100)
  description  String                  @db.VarChar(200)
  route        String                  @db.VarChar(300)
  pageGroupId  String
  pageGroup    ZentraPageGroup         @relation(fields: [pageGroupId], references: [id])
  permissions  ZentraRolePermission[]
  deletedAt    DateTime?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_page")
}

model ZentraRolePermission {
  id           String             @id @default(uuid())
  
  roleId       String
  pageId       String
  role         ZentraRole         @relation(fields: [roleId], references: [id])
  page         ZentraPage         @relation(fields: [pageId], references: [id])
  
  deletedAt    DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  idFirebase String? @default("") @db.VarChar(30)
  @@unique([roleId, pageId]) // Un permiso por página por rol

  @@map("zentra_role_permission")
}

// ZENTRA MASTERS

model ZentraCurrency {
  id            String    @id @default(uuid())
  code          String    @db.VarChar(3)
  name          String    @db.VarChar(50)
  symbol        String    @db.VarChar(5)
  
  idFirebase String? @default("") @db.VarChar(30)
  bankAccounts  ZentraBankAccount[]
  partyBankAccounts ZentraPartyBankAccount[]
  increaseRequests ZentraBudgetIncreaseRequest[]
  
  documents      ZentraDocument[]
  budgetItems    ZentraBudgetItem[]
  installments   ZentraInstallment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@map("zentra_currency")
}

model ZentraBank {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(50)
  
  bankAccounts  ZentraBankAccount[]
  partyBankAccounts ZentraPartyBankAccount[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_bank")
}

model ZentraMovementCategory {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(50)
  
  movements   ZentraMovement[]
  financialNatures ZentraFinancialNature[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_movement_category")
}

model ZentraDocumentType {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(50)
  
  documents   ZentraDocument[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  idFirebase String? @default("") @db.VarChar(30)
  
  @@map("zentra_document_type")
}

model ZentraTransactionType {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(50)
  documents   ZentraDocument[]
  movements   ZentraMovement[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_transaction_type")
}

model ZentraBudgetCategory {
  id          String                     @id @default(uuid())
  name        String                     @db.VarChar(100) // Operación, Financiamiento, Inversión
  description String?                    @db.VarChar(250) // Opcional, para una explicación más larga

  itemCategories ZentraBudgetItemCategory[] // Relación con subcategorías

  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  deletedAt   DateTime?
  idFirebase  String?                    @default("") @db.VarChar(30)

  @@map("zentra_budget_category")
}

model ZentraBudgetItemCategory {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(200)

  // Relación con categoría principal
  budgetCategory   ZentraBudgetCategory  @relation(fields: [budgetCategoryId], references: [id])
  budgetCategoryId String
  
  budgetItemDefinition ZentraBudgetItemDefinition[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  idFirebase String? @default("") @db.VarChar(30)

  @@map("zentra_budget_item_category")
}

model ZentraCompany {
  id            String            @id @default(uuid())
  name          String            @db.VarChar(50)

  projects      ZentraProject[]
  telecreditoConfigs ZentraTelecreditoConfig[]
  telecreditoOperations ZentraTelecreditoOperation[]
  
  businessName                 String?   @db.VarChar(50)
  address                      String?   @db.VarChar(100)
  documentNumber               String?   @db.VarChar(30)
  legalRepresentative          String?   @db.VarChar(50)
  representativeDocumentNumber String?   @db.VarChar(30)

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?
  idFirebase String? @default("") @db.VarChar(30)
  
  @@map("zentra_company")
}

model ZentraProject {
  id            String           @id @default(uuid())
  name          String           @db.VarChar(100)
  
  company       ZentraCompany    @relation(fields: [companyId], references: [id])
  companyId     String
  
  budgetItemDefinitions  ZentraBudgetItemDefinition[]
  bankAccounts  ZentraBankAccount[]
  
  landingPages      ZentraLandingPageRelation[]
  bankStatements    ZentraBankStatement[]
  incomes           ZentraProjectIncome[]
  subProjects       ZentraSubProject[]

  imageUrl      String?      @db.VarChar(300)
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
  idFirebase String? @default("") @db.VarChar(30)

  @@map("zentra_project")
}

model ZentraSubProject {
  id        String       @id @default(uuid())
  name      String       @db.VarChar(50)

  project   ZentraProject @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?

  @@map("zentra_sub_project")
}

model ZentraPartyRole {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(50)
  parties     ZentraParty[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_party_role")
}

model ZentraParty {
  id            String             @id @default(uuid())
  name          String             @db.VarChar(100)
   
  email         String             @db.VarChar(50)
  phone         String             @db.VarChar(20)
  address       String             @db.VarChar(200)

  document      String?            @db.VarChar(30)

  partyRole     ZentraPartyRole    @relation(fields: [partyRoleId], references: [id])
  partyRoleId   String

  documents         ZentraDocument[]
  partyDocuments    ZentraPartyDocument[]
  partyBankAccounts ZentraPartyBankAccount[]
  increaseRequests  ZentraBudgetIncreaseRequest[]

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?

  idFirebase String? @default("") @db.VarChar(30)
  
  @@map("zentra_party")
}

model ZentraPartyDocumentType {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)

  partyDocuments ZentraPartyDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("zentra_party_document_type")
}

model ZentraPartyDocumentHierarchy {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)

  partyDocuments ZentraPartyDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("zentra_party_document_hierarchy")
}

model ZentraPartyDocument {
  id                   String                        @id @default(uuid())
  document             String                        @db.VarChar(50)
  observation          String                        @db.VarChar(50)

  partyId              String                        
  party                ZentraParty                   @relation(fields: [partyId], references: [id])

  documentTypeId       String
  documentType         ZentraPartyDocumentType        @relation(fields: [documentTypeId], references: [id])

  documentHierarchyId  String
  documentHierarchy    ZentraPartyDocumentHierarchy   @relation(fields: [documentHierarchyId], references: [id])

  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @updatedAt
  deletedAt            DateTime?

  @@map("zentra_party_document")
}

model ZentraPartyBankAccount {
  id          String   @id @default(uuid())
  account     String   @db.VarChar(30)
  cci         String   @db.VarChar(50)

  bank        ZentraBank      @relation(fields: [bankId], references: [id])
  bankId      String          @db.VarChar(36)

  currency    ZentraCurrency  @relation(fields: [currencyId], references: [id])
  currencyId  String          @db.VarChar(36)

  party       ZentraParty     @relation(fields: [partyId], references: [id])
  partyId     String

  type        ZentraBankAccountType? @relation(fields: [typeId], references: [id])
  typeId      String? @db.VarChar(36)

  hierarchy   ZentraBankAccountHierarchy? @relation(fields: [hierarchyId], references: [id])
  hierarchyId String? @db.VarChar(36)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@map("zentra_party_bank_account")
}

model ZentraBankAccountType {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)

  partyBankAccounts ZentraPartyBankAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("zentra_bank_account_type")
} 

model ZentraBankAccountHierarchy {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)

  partyBankAccounts ZentraPartyBankAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("zentra_bank_account_hierarchy")
}

model ZentraBudgetItemDefinition {
  id        String                @id @default(uuid())
  name      String                @db.VarChar(100)
  
  category  ZentraBudgetItemCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  // Relación con la naturaleza (Ingreso o Gasto)
  natureId   String
  nature     ZentraBudgetNature @relation(fields: [natureId], references: [id])

  project   ZentraProject         @relation(fields: [projectId], references: [id])
  projectId String

  budgetItems ZentraBudgetItem[]  // Relación con presupuestos específicos

  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  deletedAt DateTime?
  idFirebase String?              @default("") @db.VarChar(30)

  @@map("zentra_budget_item_definition")
}

model ZentraBudgetNature {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(50) // Ej: "Ingreso", "Gasto"

  definitions ZentraBudgetItemDefinition[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  idFirebase  String?  @default("") @db.VarChar(30)

  @@map("zentra_budget_nature")
}

model ZentraBudgetItem {
  id              String   @id @default(uuid())

  // Presupuesto original
  amount          Decimal  @db.Decimal(12, 2)  // Monto presupuestado en la moneda base
  
  currencyId      String                      // Moneda base (Soles o Dólares)
  currency        ZentraCurrency @relation(fields: [currencyId], references: [id])

  // Avance del presupuesto
  executedAmount  Decimal  @default(0.00) @db.Decimal(12, 2)  // Avance en moneda base
  executedSoles   Decimal  @default(0.00) @db.Decimal(12, 2)  // Total en soles (sin conversión)
  executedDolares Decimal  @default(0.00) @db.Decimal(12, 2)  // Total en dólares (sin conversión)

  // Relaciones
  definition      ZentraBudgetItemDefinition @relation(fields: [definitionId], references: [id])
  definitionId    String
  
  documents       ZentraDocument[]
  movements       ZentraMovement[]
  incomes         ZentraProjectIncome[]

  // 👇 Relación inversa
  budgetItemHistories ZentraBudgetItemHistory[]
  increaseRequests ZentraBudgetIncreaseRequest[]

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  idFirebase      String?  @default("") @db.VarChar(30)

  @@map("zentra_budget_item")
}

model ZentraBudgetItemHistory {
  id                String   @id @default(uuid())

  // Relación con el presupuesto
  budgetItemId      String
  budgetItem        ZentraBudgetItem @relation(fields: [budgetItemId], references: [id])

  // Relación con el usuario que hizo el cambio
  userId            String
  user              ZentraUser @relation(fields: [userId], references: [id])

  // Valores del cambio
  oldAmount         Decimal  @db.Decimal(12, 2) // Monto anterior
  newAmount         Decimal  @db.Decimal(12, 2) // Monto nuevo
  percentageChange  Decimal  @db.Decimal(5, 2)  // % de variación respecto al anterior

  registeredAt      DateTime              // Fecha registrada por el usuario

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  idFirebase      String?  @default("") @db.VarChar(30)

  @@map("zentra_budget_item_history")
}

model ZentraBankAccount {
  id           String         @id @default(uuid())
  
  amount       Decimal?       @default(0.00) @db.Decimal(12, 2)
  
  bank         ZentraBank     @relation(fields: [bankId], references: [id])
  bankId       String
  
  project      ZentraProject  @relation(fields: [projectId], references: [id])
  projectId    String
  
  currency     ZentraCurrency  @relation(fields: [currencyId], references: [id])
  currencyId   String

  movements    ZentraMovement[]
  bankStatements    ZentraBankStatement[]
  telecreditoConfig ZentraTelecreditoConfig[]
  telecreditoOperations ZentraTelecreditoOperation[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_bank_account")
}

model ZentraDocument {
  id                 String                @id @default(uuid())
  
  documentDate       DateTime              // Fecha del documento
  registeredAt       DateTime              // Fecha registrada por el usuario
  expireDate         DateTime              // Fecha registrada por el usuario

  party              ZentraParty           @relation(fields: [partyId], references: [id])
  partyId            String

  currency           ZentraCurrency        @relation(fields: [currencyId], references: [id])
  currencyId         String

  documentType       ZentraDocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId     String

  documentStatus     ZentraDocumentStatus @relation(fields: [documentStatusId], references: [id])
  documentStatusId   String

  code               String                @db.VarChar(250) 
  description        String                @db.VarChar(500)
  
  totalAmount         Decimal  @default(0.00) @db.Decimal(12, 2)
  taxAmount           Decimal  @default(0.00) @db.Decimal(12, 2)
  netAmount           Decimal  @default(0.00) @db.Decimal(12, 2)
  detractionRate      Decimal  @default(0.00) @db.Decimal(12, 2)
  detractionAmount    Decimal  @default(0.00) @db.Decimal(12, 2)
  amountToPay         Decimal  @default(0.00) @db.Decimal(12, 2)
  paidAmount          Decimal  @default(0.00) @db.Decimal(12, 2)
  
  observation         String? @db.VarChar(500)

  hasMovements       Boolean @default(false)
  
  transactionType    ZentraTransactionType @relation(fields: [transactionTypeId], references: [id])
  transactionTypeId  String

  budgetItem         ZentraBudgetItem      @relation(fields: [budgetItemId], references: [id])
  budgetItemId       String
  
  user               ZentraUser            @relation(fields: [userId], references: [id])
  userId             String
  
  documentCategory   ZentraDocumentCategory @relation(fields: [documentCategoryId], references: [id])
  documentCategoryId String

  financialNature    ZentraFinancialNature? @relation(fields: [financialNatureId], references: [id])
  financialNatureId  String?

  movements          ZentraMovement[]
  files              ZentraDocumentFile[]
  scheduledIncomeDocuments ZentraScheduledIncomeDocument[]
  
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  deletedAt          DateTime?
  
  totalInflow        Decimal? @default(0.00) @db.Decimal(12, 2)   // Entradas
  totalOutflow       Decimal? @default(0.00) @db.Decimal(12, 2)   // Salidas
  
  idFirebase         String? @default("") @db.VarChar(30)

  @@map("zentra_document")
}

model ZentraMovement {
  id                 String                @id @default(uuid())

  amount             Decimal               @db.Decimal(12, 2)

  autorizeDate       DateTime              
  generateDate       DateTime              
  paymentDate        DateTime             

  description        String                @db.VarChar(500)

  bankAccount        ZentraBankAccount     @relation(fields: [bankAccountId], references: [id])
  bankAccountId      String

  movementCategory   ZentraMovementCategory @relation(fields: [movementCategoryId], references: [id])
  movementCategoryId String

  budgetItem         ZentraBudgetItem      @relation(fields: [budgetItemId], references: [id])
  budgetItemId       String
  
  transactionType    ZentraTransactionType @relation(fields: [transactionTypeId], references: [id])
  transactionTypeId  String

  document           ZentraDocument        @relation(fields: [documentId], references: [id])
  documentId         String

  movementStatus     ZentraMovementStatus @relation(fields: [movementStatusId], references: [id])
  movementStatusId   String

  exchangeRate       ZentraExchangeRate? @relation(fields: [exchangeRateId], references: [id])
  exchangeRateId     String?

  installment        ZentraInstallment?    @relation(fields: [installmentId], references: [id])
  installmentId      String?

  files              ZentraMovementFile[]
  documentUrl   String?     @db.VarChar(300)
  documentName  String?     @db.VarChar(150)

  code               String                @db.VarChar(150)

  executedAmount  Decimal @db.Decimal(12,2)
  executedSoles   Decimal @db.Decimal(12,2)
  executedDolares Decimal @db.Decimal(12,2)
  
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  deletedAt          DateTime?
  
  idFirebase String? @default("") @db.VarChar(30)
  @@map("zentra_movement")
}

model ZentraDocumentStatus {

  id          String            @id @default(uuid())
  name        String            @db.VarChar(50)
  documents   ZentraDocument[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  
  @@map("zentra_document_status")
}

model ZentraDocumentCategory {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(50)
  documents   ZentraDocument[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  
  @@map("zentra_document_category")
}

model ZentraMovementStatus {

  id          String            @id @default(uuid())
  name        String            @db.VarChar(50)
  movements   ZentraMovement[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  
  @@map("zentra_movement_status")
}

model ZentraDocumentFile {
  id           String         @id @default(uuid())
  
  document     ZentraDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId   String

  fileName     String         @db.VarChar(255) // Nombre original del archivo
  fileUrl      String         @db.VarChar(700) // URL completa en Firebase Storage
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  
  @@map("zentra_document_file")
}

model ZentraExchangeRate {
  id         String   @id @default(uuid())
  date       DateTime @unique          // Fecha del tipo de cambio (ej: 2025-08-21)
  buyRate    Decimal  @db.Decimal(10,4) // Tipo de cambio compra
  sellRate   Decimal  @db.Decimal(10,4) // Tipo de cambio venta
  
  movements  ZentraMovement[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("zentra_exchange_rate")
}

model ZentraLandingPageRelation {
  id              String         @id @default(uuid())
  
  zentraProject   ZentraProject  @relation(fields: [zentraProjectId], references: [id])
  zentraProjectId String

  landingPage  LandingPage @relation(fields: [landingPageId], references: [id])
  landingPageId String

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?

  @@map("zentra_landing_page_relation")
}

model ZentraSaleType {
  id          String                   @id @default(uuid())
  name        String                   @db.VarChar(50)

  scheduledIncomeDocuments ZentraScheduledIncomeDocument[]

  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  deletedAt   DateTime?
  idFirebase String? @default("") @db.VarChar(30)
  
  @@map("zentra_sale_type")
}

model ZentraBroker {
  id          String                   @id @default(uuid())
  name        String                   @db.VarChar(100)

  scheduledIncomeDocuments ZentraScheduledIncomeDocument[]

  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  deletedAt   DateTime?
  idFirebase String? @default("") @db.VarChar(30)

  @@map("zentra_broker")
}

model ZentraScheduledIncomeDocument {
  id           String         @id @default(uuid())

  document     ZentraDocument @relation(fields: [documentId], references: [id])
  documentId   String

  broker       ZentraBroker?  @relation(fields: [brokerId], references: [id])
  brokerId     String?

  saleType     ZentraSaleType? @relation(fields: [saleTypeId], references: [id])
  saleTypeId   String?

  lot          LandingLot?    @relation(fields: [lotId], references: [id])
  lotId        String?

  status       ZentraScheduledIncomeDocumentStatus? @relation(fields: [statusId], references: [id])
  statusId     String?

  serialNumber              String?   // Correlativo
  referenceCode             String?   // Código Correlativo
  placeOfIssue              String?   // Lugar de Giro

  acceptorName1             String?   // Aceptante nombre 1
  acceptorDni1              String?   // Aceptante dni 1
  acceptorPhone1            String?   // Aceptante celular 1

  acceptorName2             String?   // Aceptante nombre 2
  acceptorDni2              String?   // Aceptante dni 2
  acceptorPhone2            String?   // Aceptante celular 2

  permanentGuarantorName        String?   // Aval Permanente Nombre
  permanentGuarantorAddress     String?   // Aval Permanente Domicilio
  permanentGuarantorDni         String?   // Aval Permanente DNI
  permanentGuarantorPhone       String?   // Aval Permanente Teléfono



  installments ZentraInstallment[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  @@map("zentra_scheduled_income_document")
}

model ZentraScheduledIncomeDocumentStatus {
  id          String                   @id @default(uuid())
  name        String                   @db.VarChar(30)

  scheduledIncomeDocuments ZentraScheduledIncomeDocument[]

  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  deletedAt   DateTime?
  
  @@map("zentra_scheduled_income_document_status")
}

model ZentraInstallmentStatus {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)

  installments ZentraInstallment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  idFirebase String? @default("") @db.VarChar(30)

  @@map("zentra_installment_status")
}

model ZentraInstallment {
  id          String    @id @default(uuid())

  scheduledIncomeDocument   ZentraScheduledIncomeDocument @relation(fields: [scheduledIncomeDocumentId], references: [id])
  scheduledIncomeDocumentId String

  installmentStatus   ZentraInstallmentStatus @relation(fields: [installmentStatusId], references: [id])
  installmentStatusId String

  currency   ZentraCurrency @relation(fields: [currencyId], references: [id])
  currencyId String

  letra       Int
  capital      Decimal @db.Decimal(12, 2)
  interest     Decimal @db.Decimal(12, 2)
  totalAmount  Decimal @db.Decimal(12, 2)
  extra        Decimal @db.Decimal(12, 2)
  dueDate      DateTime

  paidAmount    Decimal  @default(0.00) @db.Decimal(12, 2)  
  description   String                @db.VarChar(200)
  movements     ZentraMovement[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  
  idFirebase String? @default("") @db.VarChar(30)
  
  @@map("zentra_installment")
}

model ZentraBankStatement {
  id          String        @id @default(uuid())
  
  project     ZentraProject @relation(fields: [projectId], references: [id])
  projectId   String

  bankAccount     ZentraBankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId   String

  statementDate DateTime    @default(now())
  documentUrl   String?     @db.VarChar(300)
  documentName  String?     @db.VarChar(150)
  
  balance      Decimal      @db.Decimal(12, 2)
  description  String?      @db.VarChar(255)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?

  idFirebase String? @default("") @db.VarChar(30)

  @@map("zentra_bank_statement")
}

model ZentraMovementFile {
  id           String         @id @default(uuid())
  
  movement     ZentraMovement @relation(fields: [movementId], references: [id], onDelete: Cascade)
  movementId   String

  fileName     String         @db.VarChar(255) // Nombre original del archivo
  fileUrl      String         @db.VarChar(700) // URL completa en Firebase Storage
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  
  @@map("zentra_movement_file")
}

model ZentraFinancialNature {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(50)

  movementCategory   ZentraMovementCategory @relation(fields: [movementCategoryId], references: [id])
  movementCategoryId String

  documents   ZentraDocument[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  idFirebase  String? @default("") @db.VarChar(30)

  @@map("zentra_financial_nature")
}

model ZentraBudgetIncreaseRequest {
  id              String   @id @default(uuid())
  
  budgetItemId    String
  budgetItem      ZentraBudgetItem @relation(fields: [budgetItemId], references: [id])

  currencyId      String
  currency        ZentraCurrency @relation(fields: [currencyId], references: [id])
  
  userId          String
  user            ZentraUser @relation(fields: [userId], references: [id])
  
  partyId         String
  party           ZentraParty @relation(fields: [partyId], references: [id])

  requestedAmount Decimal  @db.Decimal(12, 2) // Monto total solicitado en el documento
  availableAmount Decimal  @db.Decimal(12, 2) // Lo disponible en el presupuesto
  extraNeeded     Decimal  @db.Decimal(12, 2) // Diferencia: lo que falta

  documentCode        String   @db.VarChar(50)
  documentDescription String   @db.VarChar(255)

  statusId        String
  status          ZentraBudgetIncreaseStatus @relation(fields: [statusId], references: [id])

  registeredAt      DateTime              // Fecha registrada por el usuario
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("zentra_budget_increase_request")
}

model ZentraBudgetIncreaseStatus {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(20)

  requests    ZentraBudgetIncreaseRequest[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("zentra_budget_increase_status")
}

model ZentraProjectIncome {
  id           String   @id @default(uuid())

  project      ZentraProject   @relation(fields: [projectId], references: [id])
  projectId    String

  budgetItem   ZentraBudgetItem @relation(fields: [budgetItemId], references: [id])
  budgetItemId String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("zentra_project_income")
}

model ZentraTelecreditoConfig {
  id              String   @id @default(uuid())

  company         ZentraCompany  @relation(fields: [companyId], references: [id])
  companyId       String

  bankAccount     ZentraBankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId   String

  clientCode      String   // Código de cliente asignado por el BCP
  payrollType     String   // Tipo de planilla (ej: PROV)

  recordType      String   @default("C") // Siempre será "C" para el registro de cargo
  accountType     String   // Tipo de cuenta de cargo: "C" = corriente, "A" = ahorro
  accountNumber   String   // Número de cuenta de cargo del BCP
  reference       String?  // Referencia de la planilla
  checkItf        String?  @db.VarChar(1)// Validar Itf
  checkParty      String?  @db.VarChar(1)// Validar nombre del proveedor

  telecreditoOperations ZentraTelecreditoOperation[]  // 👈 inversa

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  @@map("zentra_telecredito_config")
}

model ZentraTelecreditoOperationState {
  id              String   @id @default(uuid())

  name            String  @db.VarChar(20)

  telecreditoOperations ZentraTelecreditoOperation[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  @@map("zentra_telecredito_operation_state")
}


model ZentraTelecreditoOperation {
  id           String   @id @default(uuid())

  bankAccount  ZentraBankAccount            @relation(fields: [bankAccountId], references: [id])
  bankAccountId String

  company      ZentraCompany                @relation(fields: [companyId], references: [id])
  companyId    String

  telecreditoConfig ZentraTelecreditoConfig @relation(fields: [telecreditoConfigId], references: [id])
  telecreditoConfigId String

  state        ZentraTelecreditoOperationState @relation(fields: [stateId], references: [id])
  stateId      String

  datePayment  DateTime

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@map("zentra_telecredito_operation")
}

model ZentraTelecreditoOperation {
  id           String   @id @default(uuid())

  bankAccount  ZentraBankAccount            @relation(fields: [bankAccountId], references: [id])
  bankAccountId String

  company      ZentraCompany                @relation(fields: [companyId], references: [id])
  companyId    String

  telecreditoConfig ZentraTelecreditoConfig @relation(fields: [telecreditoConfigId], references: [id])
  telecreditoConfigId String

  state        ZentraTelecreditoOperationState @relation(fields: [stateId], references: [id])
  stateId      String

  datePayment  DateTime

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@map("zentra_telecredito_operation")
}


