name: Build and deploy Node.js app to Azure Web App - be-alfanevado

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm install

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build project
        run: npm run build

      # Verificar que los archivos necesarios existen
      - name: Check built files
        run: |
          ls -la dist/
          ls -la prisma/
          [ -f tsconfig.json ] && echo "tsconfig.json exists" || echo "WARNING: tsconfig.json not found"

      # Crear package de despliegue con SOLO lo necesario
      - name: Create deployment package
        run: |
          mkdir -p deployment
          # Copiar archivos compilados
          cp -r dist/ deployment/
          # Copiar archivos de Prisma
          cp -r prisma/ deployment/
          # Copiar package.json y package-lock.json
          cp package.json package-lock.json deployment/
          # Copiar tsconfig.json para referencia (si existe)
          [ -f tsconfig.json ] && cp tsconfig.json deployment/ || echo "tsconfig.json not found"
          # Copiar otros archivos necesarios
          [ -f nest-cli.json ] && cp nest-cli.json deployment/ || echo "nest-cli.json not found"
          
          # Instalar solo dependencias de producción
          cd deployment
          npm ci --only=production --ignore-scripts
          
          echo "Contenido del directorio deployment:"
          ls -la

      - name: Zip artifact for deployment
        run: cd deployment && zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Unzip artifact for deployment
        run: unzip release.zip -d deployment-files

      - name: Verify deployment files
        run: |
          echo "Archivos en deployment-files:"
          ls -la deployment-files/
          echo "¿Existe tsconfig.json?"
          [ -f deployment-files/tsconfig.json ] && echo "SÍ" || echo "NO"
          echo "¿Existe dist/?"
          [ -d deployment-files/dist ] && echo "SÍ" || echo "NO"

      # Agregar delay para evitar conflicto SCM
      - name: Wait before deployment
        run: sleep 30s

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'be-alfanevado'
          slot-name: 'Production'
          package: deployment-files
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_DBA683BB3DAF41749D5C4548B9A609AC }}

      - name: Wait for app to be ready
        run: sleep 30s